Тестовое задание.
Цель задания – разработать чат-сервер, предоставляющий HTTP API для работы с чатами и сообщениями пользователя.

****ОСНОВНЫЕ ТРЕБОВАНИЯ:

1) Писать код на языке Java 1.8 и выше
2) Использовать Spring Boot 2.0 и выше, Spring Framework 3.0 и выше
3) В качестве хранилища данных можно использовать любую технологию, поддерживаемую JPA(Hibernate)
4) При перезапуске сервера добавленные данные должны сохраняться
5) Сервер должен быть доступен на порту 9000
6) Визуализация данных в виде пользовательского интерфейса (веб-приложение, мобильное приложение) не требуется – достаточно только обозначенного ниже API, доступного из командной строки. Однако простор фантазии не ограничиваем, покуда соблюдаются основные требования.
7) Предоставить инструкцию по запуску приложения. 

****ОСНОВНЫЕ СУЩНОСТИ:
Ниже перечислены основные сущности, которыми должен оперировать сервер.

USER
Пользователь приложения. Имеет следующие свойства:

id - уникальный идентификатор пользователя (может быть как числом, так и строковым)
username - уникальное имя пользователя
created_at - время создания пользователя (timestamp)
// chats - список чатов пользователя

CHAT
Отдельный чат. Имеет следующие свойства:

id - уникальный идентификатор чата
name - уникальное имя чата
users - список пользователей в чате, отношение многие-ко-многим
created_at - время создания

MESSAGE
Сообщение в чате. Имеет следующие свойства:

id - уникальный идентификатор сообщения
chat - ссылка на идентификатор чата, в который было отправлено сообщение
author - ссылка на идентификатор отправителя сообщения, отношение многие-к-одному
text - текст отправленного сообщения
created_at - время создания


ОСНОВНЫЕ API МЕТОДЫ:
Методы обрабатывают HTTP POST запросы c телом, содержащим все необходимые параметры в JSON.

1) Добавить нового пользователя
Запрос:

curl --header "Content-Type: application/json" \
  --request POST \
  --data '{"username": "user_1"}' \
  http://localhost:9000/users/add
Ответ: id созданного пользователя или HTTP-код ошибки + описание ошибки.

2) Создать новый чат между пользователями
Запрос:

curl --header "Content-Type: application/json" \
  --request POST \
  --data '{"name": "chat_1", "users": ["<USER_ID_1>", "<USER_ID_2>"]}' \
  http://localhost:9000/chats/add
Ответ: id созданного чата или HTTP-код ошибки или HTTP-код ошибки + описание ошибки.

Количество пользователей в чате не ограничено.

3) Отправить сообщение в чат от лица пользователя
Запрос:

curl --header "Content-Type: application/json" \
  --request POST \
  --data '{"chat": "<CHAT_ID>", "author": "<USER_ID>", "text": "hi"}' \
  http://localhost:9000/messages/add
Ответ: id созданного сообщения или HTTP-код ошибки + описание ошибки.

4) Получить список чатов конкретного пользователя
Запрос:

curl --header "Content-Type: application/json" \
  --request POST \
  --data '{"user": "<USER_ID>"}' \
  http://localhost:9000/chats/get
Ответ: cписок всех чатов со всеми полями, отсортированный по времени создания последнего сообщения в чате (от позднего к раннему). Или HTTP-код ошибки + описание ошибки.

5) Получить список сообщений в конкретном чате
Запрос:

curl --header "Content-Type: application/json" \
  --request POST \
  --data '{"chat": "<CHAT_ID>"}' \
  http://localhost:9000/messages/get
Ответ: список всех сообщений чата со всеми полями, отсортированный по времени создания сообщения (от раннего к позднему). Или HTTP-код ошибки + описание ошибки.

6) Получить кол-во сообщений в конкретном чате, с указанным текстом
Запрос:

curl --header "Content-Type: application/json" \
  --request POST \
  --data '{"chat": "<CHAT_ID>", "text": "hi"}' \
  http://localhost:9000/messages/entry/count
Ответ: Название чата, поисковый текст, кол-во вхождений. Или HTTP-код ошибки + описание ошибки.
